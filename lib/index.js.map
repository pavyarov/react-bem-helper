{"version":3,"file":"index.js","sources":["../src/utils/pick.js","../src/utils/capitalize.js","../src/utils/decapitalize.js","../src/utils/kebab-case.js","../src/utils/kebab-to-camel-case.js","../node_modules/classnames/bind.js","../src/utils/class-names-list.js","../src/tag/tag.js","../src/modifier/modifier.jsx","../src/modifier/modifier-predicates.js","../src/bem-config.js","../src/create-block-context.js","../src/bem-naming-factory/bem-naming-factory.js","../src/block/block.jsx","../src/element/element.jsx","../src/bem/bem-css-parser.js","../src/bem/modifiers-list-to-modifiers-map.js","../src/bem/bem.js"],"sourcesContent":["// @flow\ntype Optional = <V>(V) => V | void;\n\nexport function pick<O: {}>(\n    keys?: string[] | null | void,\n): (obj?: O | null | void) => $ObjMap<O, Optional> {\n    return (obj) => {\n        if (!keys || !obj) {\n            return {};\n        }\n        const validKeys = keys.filter(key => key in obj);\n        const filteredProps = validKeys.map(key => ({\n            [key]: obj[key],\n        }));\n        return Object.assign({}, ...filteredProps);\n    };\n}\n","// @flow\n\nexport function capitalize(str?: mixed): string {\n    if (str === null || str === undefined || str === '') {\n        return '';\n    }\n    if (typeof str !== 'string') {\n        return capitalize(String(str));\n    }\n    return `${str[0].toUpperCase()}${str.substr(1).toLowerCase()}`;\n}\n","// @flow\n\nexport function decapitalize(str?: mixed): string {\n    if (str === null || str === undefined || str === '') {\n        return '';\n    }\n    if (typeof str !== 'string') {\n        return decapitalize(String(str));\n    }\n    return `${str[0].toLowerCase()}${str.substr(1)}`;\n}\n","// @flow\n\n/**\n * Translates string to kebab-case\n */\nexport function kebabCase(str?: mixed): string {\n    if (str === null || str === undefined || str === '') {\n        return '';\n    }\n    if (typeof str !== 'string') {\n        return kebabCase(String(str));\n    }\n    return str\n        .replace(/([A-Z]+)/g, '-$1')\n        .replace(/\\W+/g, '-')\n        .replace(/^\\W+/, '')\n        .replace(/\\W+$/, '')\n        .toLowerCase();\n}\n","// @flow\n\nimport { capitalize } from './capitalize';\nimport { decapitalize } from './decapitalize';\n\nexport function kebabToCamelCase(str?: mixed): string {\n    if (str === null || str === undefined || str === '') {\n        return '';\n    }\n    if (typeof str !== 'string') {\n        return kebabToCamelCase(String(str));\n    }\n    if (str.indexOf('-') === -1) {\n        // Not a kebab-case\n        return clean(str);\n    }\n    const [head, ...tail] = (str.match(/[^-]+/g) || []).map(clean);\n    return [decapitalize(head), ...tail.map(capitalize)].join('');\n}\n\nfunction clean(str: string): string {\n    return str.replace(/^\\W+/, '').replace(/\\W+$/, '');\n}\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(this && this[arg] || arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(this, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(this && this[key] || key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// @flow\nimport classNames from 'classnames/bind';\nimport type { CSSModule } from '../bem-helper-types';\n\n/**\n * Wrapper around \"classnames/bind\" with slightly different output\n */\nexport function classNamesList(styles?: CSSModule = {}): (...mixed[]) => string[] {\n    const boundClassNames: (...mixed[]) => string = classNames.bind(styles);\n    return (...args) =>\n        boundClassNames(...args)\n            .split(' ')\n            .filter(Boolean);\n}\n","// @flow\nimport React from 'react';\nimport type { DOMComponent } from '../bem-helper-types';\nimport { pick } from '../utils';\n\nconst KNOWN_KEYS = ['key', 'className', 'children'];\n\n/**\n * Since react@15.2.0 there is new mechanism for handling unknown props.\n * This factory function provides straighforward way to define React DOM component\n * with restricted list of attributes (whitelist)\n */\nexport function tag(tagName: string): <Attrs: {}>(attrs?: Attrs) => DOMComponent<Attrs> {\n    return (attrs = {}) => {\n        const whitelist = KNOWN_KEYS.concat(Object.keys(attrs));\n        const prune = pick(whitelist);\n        const Tag = props =>\n            React.createElement(tagName, {\n                ...attrs,\n                ...prune(props),\n            });\n        Tag.displayName = `tag(${tagName})`;\n        return Tag;\n    };\n}\n\nexport const div = tag('div');\nexport const span = tag('span');\n\nexport const form = tag('form');\n\nexport const button = <Attrs: {}>(attrs?: Attrs): DOMComponent<Attrs> =>\n    tag('button')({\n        type: 'button',\n        onClick: () => {},\n        ...attrs,\n    });\n\nexport const input = <Attrs: {}>(attrs?: Attrs): DOMComponent<Attrs> =>\n    tag('input')({\n        type: 'text',\n        name: '',\n        value: '',\n        onChange: () => {},\n        onFocus: () => {},\n        onBlur: () => {},\n        ...attrs,\n    });\n\nexport const label = <Attrs: {}>(attrs?: Attrs): DOMComponent<Attrs> =>\n    tag('label')({\n        htmlFor: '',\n        ...attrs,\n    });\n\nexport const textarea = <Attrs: {}>(attrs?: Attrs): DOMComponent<Attrs> =>\n    tag('textarea')({\n        name: '',\n        rows: 2,\n        onChange: () => {},\n        ...attrs,\n    });\n","// @flow\nimport React from 'react';\nimport type { Component } from '../bem-helper-types';\nimport type { ModifierPredicate } from './modifier-predicates';\n\n/**\n * Decorator to define components bound to particular modifiers\n */\nexport function modifier<Props: { 'data-modifiers'?: string }>(\n    predicate: ModifierPredicate,\n    ModifiedComponent: string | Component<Props>,\n): (Component<Props>) => Component<Props> {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('Please specify modifier predicate');\n    }\n    if (typeof ModifiedComponent !== 'function') {\n        throw new TypeError('Please specify modified component');\n    }\n    return (DefaultComponent) => {\n        function Wrapper(props: Props) {\n            const { 'data-modifiers': modifiers } = props; // Comes from block or element decorators\n            const modifiersList = modifiers ? modifiers.split(' ') : [];\n            const ActualComponent = predicate(modifiersList) ? ModifiedComponent : DefaultComponent;\n            return <ActualComponent {...props} />;\n        }\n        Wrapper.displayName = `modifier(${DefaultComponent.displayName || DefaultComponent.name})`;\n        return Wrapper;\n    };\n}\n","// @flow\nexport type ModifierPredicate = (string[]) => boolean;\n\nexport const is: string => ModifierPredicate = mod => modifiersList =>\n    modifiersList.indexOf(mod) !== -1;\n\nexport const startsWith: string => ModifierPredicate = prefix => modifiersList =>\n    modifiersList.some(m => m.indexOf(prefix) === 0);\n\nexport const and: (...predicates: ModifierPredicate[]) => ModifierPredicate = (\n    ...predicates\n) => modifiersList => predicates.every(p => p(modifiersList));\n\nexport const or: (...predicates: ModifierPredicate[]) => ModifierPredicate = (\n    ...predicates\n) => modifiersList => predicates.some(p => p(modifiersList));\n\nexport const not: ModifierPredicate => ModifierPredicate = predicate => modifiersList =>\n    !predicate(modifiersList);\n","// @flow\n\nexport const BEMConfig = {\n    ELEMENT_SEPARATOR: '__',\n    MODIFIER_SEPARATOR: '--',\n};\n","// @flow\nimport React from 'react';\nimport type { CSSModule } from './bem-helper-types';\n\nexport type BlockContext = {|\n    name: string,\n    styles: CSSModule | void,\n    modifiersContext: $Call<typeof React.createContext, string>,\n|};\n\nconst blockContextsMap: { [string]: BlockContext } = {};\n\nexport function createBlockContext({\n    name,\n    styles,\n}: {\n    name: string,\n    styles?: CSSModule | void,\n}): BlockContext {\n    if (!blockContextsMap[name]) {\n        blockContextsMap[name] = {\n            name,\n            styles,\n            modifiersContext: React.createContext(),\n        };\n    }\n    return blockContextsMap[name];\n}\n","// @flow\nimport { BEMConfig } from '../bem-config';\nimport { kebabCase } from '../utils';\n\ntype ModifiersToClassNames = (modifiers?: string[]) => string[];\n\n/**\n * Computes class names of block regarding active modifiers\n */\nexport function blockClassNames(blockName?: string): ModifiersToClassNames {\n    if (!blockName) {\n        throw new TypeError('[BEM] Block name should be defined');\n    }\n    return modifiedClassNames(blockName);\n}\n\n/**\n * Computes class names of element regarding active modifiers\n */\nexport function elementClassNames(blockName?: string, elementName?: string): ModifiersToClassNames {\n    if (!blockName) {\n        throw new TypeError('[BEM] Block name should be defined');\n    }\n    if (!elementName) {\n        throw new TypeError('[BEM] Element name should be defined');\n    }\n    return modifiedClassNames(`${blockName}${BEMConfig.ELEMENT_SEPARATOR}${elementName}`);\n}\n\nfunction modifiedClassNames(baseName: string): ModifiersToClassNames {\n    return (modifiers) => {\n        const modifiersClassNames = modifiers\n            ? modifiers\n                .filter(Boolean)\n                .map(adjustModifier)\n                .map(mod => `${baseName}${BEMConfig.MODIFIER_SEPARATOR}${mod}`)\n            : [];\n        return [baseName].concat(modifiersClassNames);\n    };\n}\n\nfunction adjustModifier(modifier: string): string {\n    return modifier\n        .split(BEMConfig.MODIFIER_SEPARATOR)\n        .map(kebabCase)\n        .join(BEMConfig.MODIFIER_SEPARATOR);\n}\n","// @flow\nimport React from 'react';\nimport { classNamesList } from '../utils';\nimport { blockClassNames } from '../bem-naming-factory';\nimport type { BEMEntityHOC } from '../bem-helper-types';\nimport type { BlockContext } from '../create-block-context';\n\n/**\n * HOC to declare BEM blocks.\n * Injects [className] and [data-modifiers].\n *\n * Usage:\n *\n * import { block, element, createBlockContext } from '@redneckz/react-bem-helper';\n *\n * const ctx = createBlockContext({ name: 'foo' });\n * const Foo = block(ctx)()('div');\n * const Bar = element(ctx)('bar')('div');\n *\n * <Foo>\n *     <Bar>123</Bar>\n * </Foo>\n */\nexport function block(context: BlockContext) {\n    const { name, styles, modifiersContext: ModifiersContext } = context;\n    return <Props: { className?: string }>(\n        modifiersMap?: Props => any = () => {},\n    ): BEMEntityHOC<Props> => (BlockComponent) => {\n        function BaseBlockWrapper(props: Props) {\n            const { className } = props;\n            const modifiers = classNamesList()(modifiersMap(props));\n            return (\n                <ModifiersContext.Provider value={modifiers.join(' ')}>\n                    <BlockComponent\n                        {...props}\n                        className={classNamesList(styles)(\n                            blockClassNames(name)(modifiers),\n                            className, // BEM mixin\n                        ).join(' ')}\n                        data-modifiers={modifiers.join(' ')}\n                    />\n                </ModifiersContext.Provider>\n            );\n        }\n        BaseBlockWrapper.displayName = `block(${name})`;\n        return BaseBlockWrapper;\n    };\n}\n","// @flow\nimport React from 'react';\nimport { classNamesList } from '../utils';\nimport { elementClassNames } from '../bem-naming-factory';\nimport type { CSSModule, BEMEntityHOC } from '../bem-helper-types';\nimport type { BlockContext } from '../create-block-context';\n\ntype ModifiersMap<Props> = (Props, blockModifiers?: string[]) => any;\n\n/**\n * HOC to declare BEM elements.\n * Injects [className] and [data-modifiers].\n *\n * Usage:\n *\n * import { block, element, pick, createBlockContext } from '@redneckz/react-bem-helper';\n *\n * const ctx = createBlockContext({ name: 'foo' });\n * const Foo = block(ctx)()('div');\n * const Bar = element(ctx)(\n *     'bar',\n *     pick(['quux', 'plugh']), // modifiers\n * )('div');\n *\n * <Foo>\n *     <Bar quux plugh>123</Bar>\n * </Foo>\n */\nexport function element(context: BlockContext) {\n    const { name: blockName, styles: blockStyles, modifiersContext: ModifiersContext } = context;\n    return <Props: { className?: string }>(\n        elementName: string,\n        modifiersMap?: ModifiersMap<Props> = () => {},\n        options?: { styles?: CSSModule } = {},\n    ): BEMEntityHOC<Props> => (ElementComponent) => {\n        const { styles } = options;\n        function ElementWrapper(props: Props) {\n            const { className } = props;\n            return (\n                <ModifiersContext.Consumer>\n                    {(blockModifiers) => {\n                        const elementNamesList = elementClassNames(blockName, elementName);\n                        const blockModifiersList = classNamesList()(blockModifiers);\n                        const modifiers = classNamesList()(modifiersMap(props, blockModifiersList));\n                        return (\n                            <ElementComponent\n                                {...props}\n                                className={classNamesList(styles || blockStyles)(\n                                    elementNamesList(modifiers),\n                                    className, // BEM mixin\n                                ).join(' ')}\n                                data-modifiers={modifiers.join(' ')}\n                            />\n                        );\n                    }}\n                </ModifiersContext.Consumer>\n            );\n        }\n        ElementWrapper.displayName = `element(${elementName})`;\n        return ElementWrapper;\n    };\n}\n\n/**\n * Creates modifiers map transparently applying all block modifiers to element\n * Usage:\n *\n * const Bar = element(ctx)(\n *     'bar',\n *     transparent(),\n * )('div');\n *\n * <Foo quux plugh>\n *     <Bar>123</Bar> <!-- \"quux\" and \"plugh\" will be applied -->\n * </Foo>\n */\nexport function transparent<Props>(map?: ModifiersMap<Props> = () => {}): ModifiersMap<Props> {\n    return (props, blockModifiersList) => [map(props), blockModifiersList];\n}\n","// @flow\nimport type { CSSModule } from '../bem-helper-types';\nimport { BEMConfig } from '../bem-config';\n\ntype BEMEntityModifier = string;\ntype BEMEntityDescriptor = [string, BEMEntityModifier[]];\n\nexport function parseBEMName(name: string): [string, string | void, string | void] {\n    const { ELEMENT_SEPARATOR, MODIFIER_SEPARATOR } = BEMConfig;\n    const namePattern = `^(.+?)(${ELEMENT_SEPARATOR}(.+?))?(${MODIFIER_SEPARATOR}(.+))?$`;\n    const [, blockName, , elementName, , modifier] = name.match(namePattern) || [];\n    return [blockName, elementName, modifier];\n}\n\nexport function findoutBlockDescriptor(styles: CSSModule): BEMEntityDescriptor {\n    const namesList = Object.keys(styles);\n    const [someName] = namesList;\n    const [blockName] = parseBEMName(someName);\n    return [blockName, findoutModifiers(namesList)(blockName)];\n}\n\nexport function findoutElementDescriptors(styles: CSSModule): BEMEntityDescriptor[] {\n    const namesList = Object.keys(styles);\n    return namesList\n        .map(parseBEMName)\n        .map(([, elementName]) => elementName)\n        .filter(Boolean)\n        .map(elementName => [elementName, findoutModifiers(namesList)(elementName)]);\n}\n\nfunction findoutModifiers(namesList: string[]) {\n    return (name: string): string[] =>\n        namesList\n            .map(parseBEMName)\n            .filter(([blockName, elementName]) => blockName === name || elementName === name)\n            .map(([, , modifier]) => modifier)\n            .filter(Boolean);\n}\n","// @flow\nimport { pick, kebabToCamelCase } from '../utils';\nimport { BEMConfig } from '../bem-config';\n\nexport function modifiersListToModifiersMap(modifiersList?: string[] | void | null): Object => any {\n    if (!modifiersList || modifiersList.length === 0) {\n        return () => {};\n    }\n    return props => [\n        booleanModifiersListToModifiersMap(modifiersList || [])(props),\n        enumerableModifiersListToModifiersMap(modifiersList || [])(props),\n    ];\n}\n\nfunction booleanModifiersListToModifiersMap(modifiersList: string[]): Object => any {\n    const booleanModifiers = modifiersList.filter(mod => !isEnumerableModifier(mod));\n    const booleanProps = booleanModifiers.map(kebabToCamelCase);\n    return pick(booleanProps);\n}\n\nfunction enumerableModifiersListToModifiersMap(modifiersList: string[]): Object => any {\n    const enumerableModifiers = modifiersList.filter(isEnumerableModifier);\n    const enumerableProps = enumerableModifiers\n        .map(pair => pair.split(BEMConfig.MODIFIER_SEPARATOR))\n        .map(([mod]) => mod)\n        .map(kebabToCamelCase);\n    return props =>\n        Object.assign(\n            {},\n            ...enumerableProps.map(\n                key =>\n                    props[key] && {\n                        [`${key}${BEMConfig.MODIFIER_SEPARATOR}${props[key]}`]: true,\n                    },\n            ),\n        );\n}\n\nfunction isEnumerableModifier(mod: string): boolean {\n    return mod.indexOf(BEMConfig.MODIFIER_SEPARATOR) > 0;\n}\n","// @flow\nimport type { CSSModule, Component, BEMEntityProps } from '../bem-helper-types';\nimport { createBlockContext } from '../create-block-context';\nimport { block } from '../block';\nimport { element } from '../element';\nimport { kebabToCamelCase } from '../utils';\nimport { findoutBlockDescriptor, findoutElementDescriptors } from './bem-css-parser';\nimport { modifiersListToModifiersMap } from './modifiers-list-to-modifiers-map';\n\nexport type BEMFactory = {\n    // block HOC\n    <Props: { className?: string }>(\n        string | Component<Props>,\n    ): Component<$Diff<Props, BEMEntityProps>>,\n    // element HOCs\n    [elementName: string]: <Props: { className?: string }>(\n        string | Component<Props>,\n    ) => Component<$Diff<Props, BEMEntityProps>>,\n};\n\n/**\n * BEM factory provider.\n * Can be used to generate BEM HOCs from BEM CSS.\n */\nexport function BEM(styles: CSSModule): BEMFactory {\n    if (!styles || Object.keys(styles).length === 0) {\n        throw new Error('[BEM] No class names found. Nothing to parse.');\n    }\n    const [blockName, blockModifiers] = findoutBlockDescriptor(styles);\n    const ctx = createBlockContext({ name: blockName, styles });\n    const elementDescriptors = findoutElementDescriptors(styles);\n    return Object.assign(\n        block(ctx)(modifiersListToModifiersMap(blockModifiers)),\n        ...elementDescriptors.map(([elementName, elementModifiers]) => {\n            const elementHOC = element(ctx)(\n                elementName,\n                modifiersListToModifiersMap(elementModifiers),\n            );\n            return {\n                [elementName]: elementHOC,\n                [kebabToCamelCase(elementName)]: elementHOC,\n            };\n        }),\n    );\n}\n"],"names":["pick","keys","obj","validKeys","filter","key","filteredProps","map","Object","assign","capitalize","str","undefined","String","toUpperCase","substr","toLowerCase","decapitalize","kebabCase","replace","kebabToCamelCase","indexOf","clean","match","head","tail","join","define","classNamesList","styles","boundClassNames","classNames","bind","split","Boolean","KNOWN_KEYS","tag","tagName","attrs","whitelist","concat","prune","Tag","React","createElement","props","displayName","div","span","form","button","input","label","textarea","modifier","predicate","ModifiedComponent","TypeError","DefaultComponent","Wrapper","modifiers","modifiersList","ActualComponent","name","is","mod","startsWith","some","m","prefix","and","predicates","every","p","or","not","BEMConfig","blockContextsMap","createBlockContext","createContext","blockClassNames","blockName","modifiedClassNames","elementClassNames","elementName","ELEMENT_SEPARATOR","baseName","modifiersClassNames","adjustModifier","MODIFIER_SEPARATOR","block","context","ModifiersContext","modifiersContext","modifiersMap","BlockComponent","BaseBlockWrapper","className","element","blockStyles","options","ElementComponent","ElementWrapper","blockModifiers","elementNamesList","blockModifiersList","transparent","parseBEMName","namePattern","findoutBlockDescriptor","namesList","someName","findoutModifiers","findoutElementDescriptors","modifiersListToModifiersMap","length","booleanModifiersListToModifiersMap","enumerableModifiersListToModifiersMap","booleanModifiers","isEnumerableModifier","booleanProps","enumerableModifiers","enumerableProps","pair","BEM","Error","ctx","elementDescriptors","elementModifiers","elementHOC"],"mappings":";;;;;;;;AAGO,SAASA,IAAT,CACHC,IADG,EAE4C;WACxC,UAACC,GAAD,EAAS;YACR,CAACD,IAAD,IAAS,CAACC,GAAd,EAAmB;mBACR,EAAP;;YAEEC,YAAYF,KAAKG,MAAL,CAAY;mBAAOC,OAAOH,GAAd;SAAZ,CAAlB;YACMI,gBAAgBH,UAAUI,GAAV,CAAc;;;mCAC/BF,GAD+B,IACzBH,IAAIG,GAAJ,CADyB;SAAd,CAAtB;eAGOG,OAAOC,MAAP,gBAAc,EAAd,SAAqBH,aAArB,EAAP;KARJ;;;ACJG,SAASI,UAAT,CAAoBC,GAApB,EAAyC;QACxCA,QAAQ,IAAR,IAAgBA,QAAQC,SAAxB,IAAqCD,QAAQ,EAAjD,EAAqD;eAC1C,EAAP;;QAEA,OAAOA,GAAP,KAAe,QAAnB,EAA6B;eAClBD,WAAWG,OAAOF,GAAP,CAAX,CAAP;;gBAEMA,IAAI,CAAJ,EAAOG,WAAP,EAAV,GAAiCH,IAAII,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAAjC;;;ACPG,SAASC,YAAT,CAAsBN,GAAtB,EAA2C;QAC1CA,QAAQ,IAAR,IAAgBA,QAAQC,SAAxB,IAAqCD,QAAQ,EAAjD,EAAqD;eAC1C,EAAP;;QAEA,OAAOA,GAAP,KAAe,QAAnB,EAA6B;eAClBM,aAAaJ,OAAOF,GAAP,CAAb,CAAP;;gBAEMA,IAAI,CAAJ,EAAOK,WAAP,EAAV,GAAiCL,IAAII,MAAJ,CAAW,CAAX,CAAjC;;;ACPJ;;;AAGA,AAAO,SAASG,SAAT,CAAmBP,GAAnB,EAAwC;QACvCA,QAAQ,IAAR,IAAgBA,QAAQC,SAAxB,IAAqCD,QAAQ,EAAjD,EAAqD;eAC1C,EAAP;;QAEA,OAAOA,GAAP,KAAe,QAAnB,EAA6B;eAClBO,UAAUL,OAAOF,GAAP,CAAV,CAAP;;WAEGA,IACFQ,OADE,CACM,WADN,EACmB,KADnB,EAEFA,OAFE,CAEM,MAFN,EAEc,GAFd,EAGFA,OAHE,CAGM,MAHN,EAGc,EAHd,EAIFA,OAJE,CAIM,MAJN,EAIc,EAJd,EAKFH,WALE,EAAP;;;ACPG,SAASI,gBAAT,CAA0BT,GAA1B,EAA+C;QAC9CA,QAAQ,IAAR,IAAgBA,QAAQC,SAAxB,IAAqCD,QAAQ,EAAjD,EAAqD;eAC1C,EAAP;;QAEA,OAAOA,GAAP,KAAe,QAAnB,EAA6B;eAClBS,iBAAiBP,OAAOF,GAAP,CAAjB,CAAP;;QAEAA,IAAIU,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;;eAElBC,MAAMX,GAAN,CAAP;;;eAEoB,CAACA,IAAIY,KAAJ,CAAU,QAAV,KAAuB,EAAxB,EAA4BhB,GAA5B,CAAgCe,KAAhC,CAX0B;QAW3CE,IAX2C;QAWlCC,IAXkC;;WAY3C,CAACR,aAAaO,IAAb,CAAD,SAAwBC,KAAKlB,GAAL,CAASG,UAAT,CAAxB,EAA8CgB,IAA9C,CAAmD,EAAnD,CAAP;;;AAGJ,SAASJ,KAAT,CAAeX,GAAf,EAAoC;WACzBA,IAAIQ,OAAJ,CAAY,MAAZ,EAAoB,EAApB,EAAwBA,OAAxB,CAAgC,MAAhC,EAAwC,EAAxC,CAAP;;;;;;;;;;;;;;;ACdJ,CAAC,YAAY;;CAGZ,IAAI,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC;;CAE/B,SAAS,UAAU,IAAI;EACtB,IAAI,OAAO,GAAG,EAAE,CAAC;;EAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GAC1C,IAAI,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;GACvB,IAAI,CAAC,GAAG,EAAE,SAAS;;GAEnB,IAAI,OAAO,GAAG,OAAO,GAAG,CAAC;;GAEzB,IAAI,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,QAAQ,EAAE;IACjD,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;IACvC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IAC9B,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1C,MAAM,IAAI,OAAO,KAAK,QAAQ,EAAE;IAChC,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;KACpB,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE;MACtC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;MACvC;KACD;IACD;GACD;;EAED,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EACzB;;CAED,IAAI,AAAiC,MAAM,CAAC,OAAO,EAAE;EACpD,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC;EAChC,cAAc,GAAG,UAAU,CAAC;EAC5B,MAAM,IAAI,OAAOQ,SAAM,KAAK,UAAU,IAAI,OAAOA,SAAM,CAAC,GAAG,KAAK,QAAQ,IAAIA,SAAM,CAAC,GAAG,EAAE;;EAExFA,SAAM,CAAC,YAAY,EAAE,EAAE,EAAE,YAAY;GACpC,OAAO,UAAU,CAAC;GAClB,CAAC,CAAC;EACH,MAAM;EACN,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;EAC/B;CACD,EAAE,EAAE;;;AC5CL;;;AAGA,AAAO,SAASC,cAAT,GAA2E;QAAnDC,MAAmD,uEAA9B,EAA8B;;QACxEC,kBAA0CC,KAAWC,IAAX,CAAgBH,MAAhB,CAAhD;WACO;eACHC,4CACKG,KADL,CACW,GADX,EAEK7B,MAFL,CAEY8B,OAFZ,CADG;KAAP;;;;;;;;;;;;;;;;;ACJJ,IAAMC,aAAa,CAAC,KAAD,EAAQ,WAAR,EAAqB,UAArB,CAAnB;;;;;;;AAOA,AAAO,SAASC,GAAT,CAAaC,OAAb,EAAiF;WAC7E,YAAgB;YAAfC,KAAe,uEAAP,EAAO;;YACbC,YAAYJ,WAAWK,MAAX,CAAkBhC,OAAOP,IAAP,CAAYqC,KAAZ,CAAlB,CAAlB;YACMG,QAAQzC,KAAKuC,SAAL,CAAd;YACMG,MAAM,SAANA,GAAM;mBACRC,MAAMC,aAAN,CAAoBP,OAApB,eACOC,KADP,EAEOG,MAAMI,KAAN,CAFP,EADQ;SAAZ;YAKIC,WAAJ,YAAyBT,OAAzB;eACOK,GAAP;KATJ;;;AAaJ,IAAaK,MAAMX,IAAI,KAAJ,CAAZ;AACP,IAAaY,OAAOZ,IAAI,MAAJ,CAAb;;AAEP,IAAaa,OAAOb,IAAI,MAAJ,CAAb;;AAEP,IAAac,SAAS,SAATA,MAAS,CAAYZ,KAAZ;WAClBF,IAAI,QAAJ;cACU,QADV;iBAEa,mBAAM;OACZE,KAHP,EADkB;CAAf;;AAOP,IAAaa,QAAQ,SAARA,KAAQ,CAAYb,KAAZ;WACjBF,IAAI,OAAJ;cACU,MADV;cAEU,EAFV;eAGW,EAHX;kBAIc,oBAAM,EAJpB;iBAKa,mBAAM,EALnB;gBAMY,kBAAM;OACXE,KAPP,EADiB;CAAd;;AAWP,IAAac,QAAQ,SAARA,KAAQ,CAAYd,KAAZ;WACjBF,IAAI,OAAJ;iBACa;OACNE,KAFP,EADiB;CAAd;;AAMP,IAAae,WAAW,SAAXA,QAAW,CAAYf,KAAZ;WACpBF,IAAI,UAAJ;cACU,EADV;cAEU,CAFV;kBAGc,oBAAM;OACbE,KAJP,EADoB;CAAjB;;;;;;;;;;;;;;;AClDP;;;AAGA,AAAO,SAASgB,QAAT,CACHC,SADG,EAEHC,iBAFG,EAGmC;QAClC,OAAOD,SAAP,KAAqB,UAAzB,EAAqC;cAC3B,IAAIE,SAAJ,CAAc,mCAAd,CAAN;;QAEA,OAAOD,iBAAP,KAA6B,UAAjC,EAA6C;cACnC,IAAIC,SAAJ,CAAc,mCAAd,CAAN;;WAEG,UAACC,gBAAD,EAAsB;iBAChBC,OAAT,CAAiBd,KAAjB,EAA+B;gBACDe,SADC,GACaf,KADb,CACnB,gBADmB;;gBAErBgB,gBAAgBD,YAAYA,UAAU3B,KAAV,CAAgB,GAAhB,CAAZ,GAAmC,EAAzD;gBACM6B,kBAAkBP,UAAUM,aAAV,IAA2BL,iBAA3B,GAA+CE,gBAAvE;mBACO,oBAAC,eAAD,EAAqBb,KAArB,CAAP;;gBAEIC,WAAR,kBAAkCY,iBAAiBZ,WAAjB,IAAgCY,iBAAiBK,IAAnF;eACOJ,OAAP;KARJ;;;ICfSK,KAAkC,SAAlCA,EAAkC;WAAO;eAClDH,cAAcxC,OAAd,CAAsB4C,GAAtB,MAA+B,CAAC,CADkB;KAAP;CAAxC;;;AAGP,IAAaC,aAA0C,SAA1CA,UAA0C;WAAU;eAC7DL,cAAcM,IAAd,CAAmB;mBAAKC,EAAE/C,OAAF,CAAUgD,MAAV,MAAsB,CAA3B;SAAnB,CAD6D;KAAV;CAAhD;;AAGP,IAAaC,MAAiE,SAAjEA,GAAiE;sCACvEC,UADuE;kBAAA;;;WAEzE;eAAiBA,WAAWC,KAAX,CAAiB;mBAAKC,EAAEZ,aAAF,CAAL;SAAjB,CAAjB;KAFyE;CAAvE;;AAIP,IAAaa,KAAgE,SAAhEA,EAAgE;uCACtEH,UADsE;kBAAA;;;WAExE;eAAiBA,WAAWJ,IAAX,CAAgB;mBAAKM,EAAEZ,aAAF,CAAL;SAAhB,CAAjB;KAFwE;CAAtE;;AAIP,IAAac,MAA8C,SAA9CA,GAA8C;WAAa;eACpE,CAACpB,UAAUM,aAAV,CADmE;KAAb;CAApD;;;;;;;;;;;;;ICfMe,YAAY;uBACF,IADE;wBAED;CAFjB;;ACQP,IAAMC,mBAA+C,EAArD;;AAEA,AAAO,SAASC,kBAAT,OAMU;QALbf,IAKa,QALbA,IAKa;QAJblC,MAIa,QAJbA,MAIa;;QACT,CAACgD,iBAAiBd,IAAjB,CAAL,EAA6B;yBACRA,IAAjB,IAAyB;sBAAA;0BAAA;8BAGHpB,MAAMoC,aAAN;SAHtB;;WAMGF,iBAAiBd,IAAjB,CAAP;;;ACpBJ;;;AAGA,AAAO,SAASiB,eAAT,CAAyBC,SAAzB,EAAoE;QACnE,CAACA,SAAL,EAAgB;cACN,IAAIxB,SAAJ,CAAc,oCAAd,CAAN;;WAEGyB,mBAAmBD,SAAnB,CAAP;;;;;;AAMJ,AAAO,SAASE,iBAAT,CAA2BF,SAA3B,EAA+CG,WAA/C,EAA4F;QAC3F,CAACH,SAAL,EAAgB;cACN,IAAIxB,SAAJ,CAAc,oCAAd,CAAN;;QAEA,CAAC2B,WAAL,EAAkB;cACR,IAAI3B,SAAJ,CAAc,sCAAd,CAAN;;WAEGyB,wBAAsBD,SAAtB,GAAkCL,UAAUS,iBAA5C,GAAgED,WAAhE,CAAP;;;AAGJ,SAASF,kBAAT,CAA4BI,QAA5B,EAAqE;WAC1D,UAAC1B,SAAD,EAAe;YACZ2B,sBAAsB3B,YACtBA,UACGxD,MADH,CACU8B,OADV,EAEG3B,GAFH,CAEOiF,cAFP,EAGGjF,GAHH,CAGO;wBAAU+E,QAAV,GAAqBV,UAAUa,kBAA/B,GAAoDxB,GAApD;SAHP,CADsB,GAKtB,EALN;eAMO,CAACqB,QAAD,EAAW9C,MAAX,CAAkB+C,mBAAlB,CAAP;KAPJ;;;AAWJ,SAASC,cAAT,CAAwBlC,QAAxB,EAAkD;WACvCA,SACFrB,KADE,CACI2C,UAAUa,kBADd,EAEFlF,GAFE,CAEEW,SAFF,EAGFQ,IAHE,CAGGkD,UAAUa,kBAHb,CAAP;;;ACnCJ;;;;;;;;;;;;;;;;AAgBA,AAAO,SAASC,KAAT,CAAeC,OAAf,EAAsC;QACjC5B,IADiC,GACoB4B,OADpB,CACjC5B,IADiC;QAC3BlC,MAD2B,GACoB8D,OADpB,CAC3B9D,MAD2B;QACD+D,gBADC,GACoBD,OADpB,CACnBE,gBADmB;;WAElC;YACHC,YADG,uEAC2B,YAAM,EADjC;eAEmB,UAACC,cAAD,EAAoB;qBACjCC,gBAAT,CAA0BnD,KAA1B,EAAwC;oBAC5BoD,SAD4B,GACdpD,KADc,CAC5BoD,SAD4B;;oBAE9BrC,YAAYhC,iBAAiBkE,aAAajD,KAAb,CAAjB,CAAlB;uBAEI;oCAAA,CAAkB,QAAlB;sBAA2B,OAAOe,UAAUlC,IAAV,CAAe,GAAf,CAAlC;wCACK,cAAD,eACQmB,KADR;mCAEejB,eAAeC,MAAf,EACPmD,gBAAgBjB,IAAhB,EAAsBH,SAAtB,CADO,EAEPqC,SAFO;0BAGTvE,IAHS,CAGJ,GAHI,CAFf;0CAMoBkC,UAAUlC,IAAV,CAAe,GAAf;;iBAR5B;;6BAaaoB,WAAjB,cAAwCiB,IAAxC;mBACOiC,gBAAP;SApBG;KAAP;;;AChBJ;;;;;;;;;;;;;;;;;;;AAmBA,AAAO,SAASE,OAAT,CAAiBP,OAAjB,EAAwC;QAC7BV,SAD6B,GAC0CU,OAD1C,CACnC5B,IADmC;QACVoC,WADU,GAC0CR,OAD1C,CAClB9D,MADkB;QACqB+D,gBADrB,GAC0CD,OAD1C,CACGE,gBADH;;WAEpC,UACHT,WADG;YAEHU,YAFG,uEAEkC,YAAM,EAFxC;YAGHM,OAHG,uEAGgC,EAHhC;eAImB,UAACC,gBAAD,EAAsB;gBACpCxE,MADoC,GACzBuE,OADyB,CACpCvE,MADoC;;qBAEnCyE,cAAT,CAAwBzD,KAAxB,EAAsC;oBAC1BoD,SAD0B,GACZpD,KADY,CAC1BoD,SAD0B;;uBAG9B;oCAAA,CAAkB,QAAlB;;8BACMM,cAAD,EAAoB;4BACXC,mBAAmBrB,kBAAkBF,SAAlB,EAA6BG,WAA7B,CAAzB;4BACMqB,qBAAqB7E,iBAAiB2E,cAAjB,CAA3B;4BACM3C,YAAYhC,iBAAiBkE,aAAajD,KAAb,EAAoB4D,kBAApB,CAAjB,CAAlB;+BAEI,oBAAC,gBAAD,eACQ5D,KADR;uCAEejB,eAAeC,UAAUsE,WAAzB,EACPK,iBAAiB5C,SAAjB,CADO,EAEPqC,SAFO;8BAGTvE,IAHS,CAGJ,GAHI,CAFf;8CAMoBkC,UAAUlC,IAAV,CAAe,GAAf;2BAPxB;;iBANZ;;2BAoBWoB,WAAf,gBAAwCsC,WAAxC;mBACOkB,cAAP;SA7BG;KAAP;;;;;;;;;;;;;;;;AA8CJ,AAAO,SAASI,WAAT,GAAuF;QAA3DnG,GAA2D,uEAA/B,YAAM,EAAyB;;WACnF,UAACsC,KAAD,EAAQ4D,kBAAR;eAA+B,CAAClG,IAAIsC,KAAJ,CAAD,EAAa4D,kBAAb,CAA/B;KAAP;;;ACtEG,SAASE,YAAT,CAAsB5C,IAAtB,EAA4E;QACvEsB,iBADuE,GAC7BT,SAD6B,CACvES,iBADuE;QACpDI,kBADoD,GAC7Bb,SAD6B,CACpDa,kBADoD;;QAEzEmB,0BAAwBvB,iBAAxB,gBAAoDI,kBAApD,YAAN;;eACiD1B,KAAKxC,KAAL,CAAWqF,WAAX,KAA2B,EAHG;QAGtE3B,SAHsE;QAGzDG,WAHyD;QAG1C9B,QAH0C;;WAIxE,CAAC2B,SAAD,EAAYG,WAAZ,EAAyB9B,QAAzB,CAAP;;;AAGJ,AAAO,SAASuD,sBAAT,CAAgChF,MAAhC,EAAwE;QACrEiF,YAAYtG,OAAOP,IAAP,CAAY4B,MAAZ,CAAlB;QACOkF,QAFoE,GAExDD,SAFwD;;wBAGvDH,aAAaI,QAAb,CAHuD;QAGpE9B,SAHoE;;WAIpE,CAACA,SAAD,EAAY+B,iBAAiBF,SAAjB,EAA4B7B,SAA5B,CAAZ,CAAP;;;AAGJ,AAAO,SAASgC,yBAAT,CAAmCpF,MAAnC,EAA6E;QAC1EiF,YAAYtG,OAAOP,IAAP,CAAY4B,MAAZ,CAAlB;WACOiF,UACFvG,GADE,CACEoG,YADF,EAEFpG,GAFE,CAEE;YAAI6E,WAAJ;eAAqBA,WAArB;KAFF,EAGFhF,MAHE,CAGK8B,OAHL,EAIF3B,GAJE,CAIE;eAAe,CAAC6E,WAAD,EAAc4B,iBAAiBF,SAAjB,EAA4B1B,WAA5B,CAAd,CAAf;KAJF,CAAP;;;AAOJ,SAAS4B,gBAAT,CAA0BF,SAA1B,EAA+C;WACpC,UAAC/C,IAAD;eACH+C,UACKvG,GADL,CACSoG,YADT,EAEKvG,MAFL,CAEY;gBAAE6E,SAAF;gBAAaG,WAAb;mBAA8BH,cAAclB,IAAd,IAAsBqB,gBAAgBrB,IAApE;SAFZ,EAGKxD,GAHL,CAGS;gBAAM+C,QAAN;mBAAoBA,QAApB;SAHT,EAIKlD,MAJL,CAIY8B,OAJZ,CADG;KAAP;;;AC3BG,SAASgF,2BAAT,CAAqCrD,aAArC,EAA4F;QAC3F,CAACA,aAAD,IAAkBA,cAAcsD,MAAd,KAAyB,CAA/C,EAAkD;eACvC,YAAM,EAAb;;WAEG;eAAS,CACZC,mCAAmCvD,iBAAiB,EAApD,EAAwDhB,KAAxD,CADY,EAEZwE,sCAAsCxD,iBAAiB,EAAvD,EAA2DhB,KAA3D,CAFY,CAAT;KAAP;;;AAMJ,SAASuE,kCAAT,CAA4CvD,aAA5C,EAAoF;QAC1EyD,mBAAmBzD,cAAczD,MAAd,CAAqB;eAAO,CAACmH,qBAAqBtD,GAArB,CAAR;KAArB,CAAzB;QACMuD,eAAeF,iBAAiB/G,GAAjB,CAAqBa,gBAArB,CAArB;WACOpB,KAAKwH,YAAL,CAAP;;;AAGJ,SAASH,qCAAT,CAA+CxD,aAA/C,EAAuF;QAC7E4D,sBAAsB5D,cAAczD,MAAd,CAAqBmH,oBAArB,CAA5B;QACMG,kBAAkBD,oBACnBlH,GADmB,CACf;eAAQoH,KAAK1F,KAAL,CAAW2C,UAAUa,kBAArB,CAAR;KADe,EAEnBlF,GAFmB,CAEf;YAAE0D,GAAF;eAAWA,GAAX;KAFe,EAGnB1D,GAHmB,CAGfa,gBAHe,CAAxB;WAIO;eACHZ,OAAOC,MAAP,gBACI,EADJ,SAEOiH,gBAAgBnH,GAAhB,CACC;;;mBACIsC,MAAMxC,GAAN,6BACQA,GADR,GACcuE,UAAUa,kBADxB,GAC6C5C,MAAMxC,GAAN,CAD7C,IAC4D,IAD5D,QADJ;SADD,CAFP,EADG;KAAP;;;AAYJ,SAASkH,oBAAT,CAA8BtD,GAA9B,EAAoD;WACzCA,IAAI5C,OAAJ,CAAYuD,UAAUa,kBAAtB,IAA4C,CAAnD;;;ACnBJ;;;;AAIA,AAAO,SAASmC,GAAT,CAAa/F,MAAb,EAA4C;QAC3C,CAACA,MAAD,IAAWrB,OAAOP,IAAP,CAAY4B,MAAZ,EAAoBsF,MAApB,KAA+B,CAA9C,EAAiD;cACvC,IAAIU,KAAJ,CAAU,+CAAV,CAAN;;;gCAEgChB,uBAAuBhF,MAAvB,CAJW;QAIxCoD,SAJwC;QAI7BsB,cAJ6B;;QAKzCuB,MAAMhD,mBAAmB,EAAEf,MAAMkB,SAAR,EAAmBpD,cAAnB,EAAnB,CAAZ;QACMkG,qBAAqBd,0BAA0BpF,MAA1B,CAA3B;WACOrB,OAAOC,MAAP,gBACHiF,MAAMoC,GAAN,EAAWZ,4BAA4BX,cAA5B,CAAX,CADG,SAEAwB,mBAAmBxH,GAAnB,CAAuB,gBAAqC;;;YAAnC6E,WAAmC;YAAtB4C,gBAAsB;;YACrDC,aAAa/B,QAAQ4B,GAAR,EACf1C,WADe,EAEf8B,4BAA4Bc,gBAA5B,CAFe,CAAnB;iCAKK5C,WADL,IACmB6C,UADnB,QAEK7G,iBAAiBgE,WAAjB,CAFL,IAEqC6C,UAFrC;KALD,CAFA,EAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}